import streamlit as st
import pandas as pd
from streamlit_aggrid import AgGrid
from criacao_nao_adaptadas import gerar_etiquetas
import re

@st.cache_data
def convert_df(df: pd.DataFrame):
    return df.to_csv(index=False).encode('utf-8')

def limpar_nome_escola(escola):
    escola = re.sub(r"\(INEP:\s*\d+\)", "", str(escola), flags=re.IGNORECASE).strip()
    escola = re.sub(r"\b([A-Z])\s+([A-Z])\b", r"\1\2", escola)
    siglas = ["CMEI", "EMEI", "EMEF", "EM", "EJA", "CMEF"]
    padrao = r"^(?:" + "|".join(siglas) + r")\s+"
    return re.sub(padrao, "", escola, flags=re.IGNORECASE).strip()

def interface_nao_adaptadas():
    st.header("Etiquetas - Provas N√£o Adaptadas")

    # Lista de colunas esperadas
    st.markdown("### üìã Colunas esperadas na planilha:")
    st.markdown("**Coluna obrigat√≥ria:**")
    st.code("Qual √© o nome da sua escola?")
    
    st.markdown("**Colunas opcionais (anos escolares):**")
    colunas_esperadas = [
        "Total de alunos do 1¬∫ ano da MANH√É",
        "Total de alunos do 1¬∫ ano  da TARDE", 
        "Total de alunos do 2¬∫  ano da MANH√É",
        "Total de alunos do 2¬∫  ano da TARDE",
        "Total de alunos do 3¬∫  ano da MANH√É",
        "Total de alunos do 3¬∫  ano da TARDE",
        "Total de alunos do 4¬∫  ano da MANH√É", 
        "Total de alunos do 4¬∫  ano da TARDE",
        "Total de alunos do 5¬∫  ano da MANH√É",
        "Total de alunos do 5¬∫  ano  da TARDE",
        "Total de alunos do 6¬∫ ano  da MANH√É",
        "Total de alunos do 6¬∫ ano  da TARDE",
        "Total de alunos do 7¬∫  ano da MANH√É",
        "Total de alunos do 7¬∫  ano da TARDE", 
        "Total de alunos do 8¬∫  ano da MANH√É",
        "Total de alunos do 8¬∫  ano da TARDE",
        "Total de alunos do 9¬∫  ano da MANH√É",
        "Total de alunos do 9¬∫  ano da TARDE",
        "Total de alunos da  EJAI 1¬™ TOTALIDADE",
        "Total de alunos da  EJAI 2¬™ TOTALIDADE",
        "Total de alunos da EJAI 3¬™ TOTALIDADE", 
        "Total de alunos da EJAI 4¬™ TOTALIDADE"
    ]
    
    # Criar texto copi√°vel com todas as colunas
    texto_colunas = "Qual √© o nome da sua escola?\n" + "\n".join(colunas_esperadas)
    
    with st.expander("üìù Copiar nomes das colunas"):
        st.text_area(
            "Cole estes nomes no cabe√ßalho da sua planilha:", 
            texto_colunas, 
            height=200,
            help="Voc√™ pode usar apenas algumas dessas colunas, n√£o precisa usar todas!"
        )

    # Exemplo de tabela esperada
    exemplo = {
        "Qual √© o nome da sua escola?": ["ESCOLA MUNICIPAL PEIXE-BOI"],
        "Total de alunos do 1¬∫ ano da MANH√É": [25],
        "Total de alunos do 1¬∫ ano  da TARDE": [20],
        "Total de alunos do 2¬∫  ano da MANH√É": [30],
        "Total de alunos do 2¬∫  ano da TARDE": [28],
    }
    st.markdown("### üìä Estrutura esperada da planilha:")
    st.dataframe(pd.DataFrame(exemplo))

    uploaded_file = st.file_uploader("Carregar planilha CSV", type="csv")

    if uploaded_file:
        try:
            labels_df = pd.read_csv(uploaded_file)
            
            # Mapeamento completo de colunas
            rename_map = {
                'Qual √© o nome da sua escola?': 'NOME ESCOLA',
                'Total de alunos do 1¬∫ ano da MANH√É': '1¬∫ ANO MANH√É',
                'Total de alunos do 1¬∫ ano  da TARDE': '1¬∫ ANO TARDE',
                'Total de alunos do 2¬∫  ano da MANH√É': '2¬∫ ANO MANH√É',
                'Total de alunos do 2¬∫  ano da TARDE': '2¬∫ ANO TARDE',
                'Total de alunos do 3¬∫  ano da MANH√É': '3¬∫ ANO MANH√É',
                'Total de alunos do 3¬∫  ano da TARDE': '3¬∫ ANO TARDE',
                'Total de alunos do 4¬∫  ano da MANH√É': '4¬∫ ANO MANH√É',
                'Total de alunos do 4¬∫  ano da TARDE': '4¬∫ ANO TARDE',
                'Total de alunos do 5¬∫  ano da MANH√É': '5¬∫ ANO MANH√É',
                'Total de alunos do 5¬∫  ano  da TARDE': '5¬∫ ANO TARDE',
                'Total de alunos do 6¬∫ ano  da MANH√É': '6¬∫ ANO MANH√É',
                'Total de alunos do 6¬∫ ano  da TARDE': '6¬∫ ANO TARDE',
                'Total de alunos do 7¬∫  ano da MANH√É': '7¬∫ ANO MANH√É',
                'Total de alunos do 7¬∫  ano da TARDE': '7¬∫ ANO TARDE',
                'Total de alunos do 8¬∫  ano da MANH√É': '8¬∫ ANO MANH√É',
                'Total de alunos do 8¬∫  ano da TARDE': '8¬∫ ANO TARDE',
                'Total de alunos do 9¬∫  ano da MANH√É': '9¬∫ ANO MANH√É',
                'Total de alunos do 9¬∫  ano da TARDE': '9¬∫ ANO TARDE',
                'Total de alunos da  EJAI 1¬™ TOTALIDADE': 'EJAI 1¬∫ ANO',
                'Total de alunos da  EJAI 2¬™ TOTALIDADE': 'EJAI 2¬∫ ANO',
                'Total de alunos da EJAI 3¬™ TOTALIDADE': 'EJAI 3¬∫ ANO',
                'Total de alunos da EJAI 4¬™ TOTALIDADE': 'EJAI 4¬∫ ANO'
            }
            
            # Verificar se a coluna obrigat√≥ria existe
            if 'Qual √© o nome da sua escola?' not in labels_df.columns:
                st.error("‚ùå A coluna 'Qual √© o nome da sua escola?' √© obrigat√≥ria!")
                st.stop()
            
            # Identificar quais colunas est√£o presentes na planilha
            colunas_presentes = [col for col in rename_map.keys() if col in labels_df.columns]
            
            # Renomear apenas as colunas que existem
            colunas_para_renomear = {k: v for k, v in rename_map.items() if k in labels_df.columns}
            labels_df.rename(columns=colunas_para_renomear, inplace=True)
            
            # Selecionar apenas as colunas que existem
            colunas_existentes = ['NOME ESCOLA'] + [rename_map[col] for col in colunas_presentes if col != 'Qual √© o nome da sua escola?']
            new_df = labels_df[colunas_existentes].copy()
            
            # Transformar dados (melt)
            colunas_anos = [col for col in colunas_existentes if col != 'NOME ESCOLA']
            
            if not colunas_anos:
                st.warning("‚ö†Ô∏è Nenhuma coluna de ano escolar foi encontrada na planilha!")
                st.stop()
            
            newnew_df = new_df.melt(
                id_vars=['NOME ESCOLA'], 
                value_vars=colunas_anos,
                var_name='ANO ESCOLAR', 
                value_name="TOTAL"
            )
            
            # Limpar e processar dados
            clean_df = newnew_df.dropna()
            clean_df["TOTAL"] = pd.to_numeric(clean_df["TOTAL"], errors='coerce').fillna(0).astype(int)
            clean_df = clean_df[clean_df["TOTAL"] > 0]

            if clean_df.empty:
                st.warning("‚ö†Ô∏è N√£o foram encontrados dados v√°lidos (valores maiores que 0) na planilha!")
                st.stop()

            clean_df["NOME ESCOLA"] = clean_df['NOME ESCOLA'].apply(limpar_nome_escola).str.upper()
            clean_df = clean_df.sort_values(by='NOME ESCOLA')

            # Mostrar resumo dos dados
            st.markdown("### üìà Resumo dos Dados Processados:")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Escolas", clean_df['NOME ESCOLA'].nunique())
            with col2:
                st.metric("Anos/Turmas", clean_df['ANO ESCOLAR'].nunique())
            with col3:
                st.metric("Total de Alunos", clean_df['TOTAL'].sum())

            # Exibir dados processados
            st.markdown("### üìã Dados Processados:")
            AgGrid(clean_df)

            st.download_button(
                "üì• Baixar Planilha Tratada", 
                convert_df(clean_df), 
                "base_dados_tratados.csv", 
                "text/csv"
            )

            # Se√ß√£o para gerar PDF
            st.markdown("### üè∑Ô∏è Gerar Etiquetas PDF")
            logo_file = st.file_uploader("Carregue a imagem da logo", type=["png", "jpg", "jpeg"])
            championship = st.text_input("Nome do Campeonato").upper()
            stage = st.text_input("Etapa").upper()

            if logo_file and championship and stage:
                try:
                    pdf_data = gerar_etiquetas(clean_df, logo_file, championship, stage)
                    st.download_button(
                        label="üì• Baixar PDF das Etiquetas",
                        data=pdf_data,
                        file_name='etiquetas.pdf',
                        mime='application/pdf'
                    )
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar PDF: {str(e)}")
                    
        except Exception as e:
            st.error(f"‚ùå Erro ao processar planilha: {str(e)}")
            st.info("üí° Verifique se o arquivo est√° no formato correto e tente novamente.")